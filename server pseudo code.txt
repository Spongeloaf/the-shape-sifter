imports

display loading splash screen

setup logger

load config - create from defaults if it doesn exist

apply config - store loaded values in variables

load config SQLite DB. Apply changes from config file if needed.

Create new logging table in log DB

create new active parts DB in memory.

Establish link with all modules

upload bin config to BB

Create SUIP - maybe this should happen sooner?



*****Init complete. Server is Ready!*****
*****Begin the main loop commander!******



Check Taxidermist for new part - get_from_taxi

Iterate parts table
    for index in table:
        check status and execute next action, if applicable.
            send_to_mtm()
            send_to_cf()
            send_to_bb()
            send_to_log()
        change status to reflect action taken

check clients for return

    get_from_mtm()
    check for client timeout
        for part in table
            update partDB


    get_from_cf()
    check for client timeout
        for part in table
            update partDB

    get_from_bb()
    check for client timeout
        for part in table
            update partDB
            log any parts sorted

Update SUIP
    read any input events
    write any changes

GOTO: start of loop



old server main loops, for reference only.

# old loop:


# checks if the mtm pipe has something yet, if so, read that shit and do stuff
        if pipe_from_mtm.poll(0) == True:

            # read from the pipe and store the contents for use
            read_part = pipe_from_mtm.recv()
            # print(read_part.instance_id)
            # print(read_part.part_number)
            # print(read_part.part_color)
            pipe_server_send_cf.send(read_part) # not proper! this is not asynchronus. Add SQL!

        if pipe_server_recv_cf.poll(0) ==True:
            read_part = pipe_server_recv_cf.recv()
            print('-------------\n\rFrom SSS:\n\rpart {0}\n\rcategory {3} {2}\n\rassigned to bin {1}\n\r-------------'.format(read_part.part_number,read_part.bin_assignment,read_part.category_name, read_part.category_number))

        t_stop = time.perf_counter()
        t_duration = t_stop - t_start
        if t_duration < 0.017:
            time.sleep(0.017 - t_duration)








even older loop:

        # #checks if the taxi pipe has something yet, if so, read that shit
        # if pipe_from_taxi.poll(0) == True:

        # checks if the mtm pipe has something yet, if so, read that shit and do stuff
        if pipe_from_mtm.poll(0) == True:

            # read from the pipe and store the contents for use
            read_part = pipe_from_mtm.recv()
            logger.debug(read_part.instance_id)

            # check to see if the current part instance id has changed
            if read_part.instance_id != prev_id:
                # print('new part!')
                pipe_to_classifist.send(read_part.part_number)
                prev_id = read_part.instance_id

        # #checks if the classifist pipe has something yet, if so, read that shit
        if pipe_from_classifist.poll(0) == True:
            logger.debug("received from CF")
            text = pipe_from_classifist.recv()
            logger.debug(text)
            # send to BB

        # #checks if the belt buckle pipe has something yet, if so, read that shit
        # if pipe_from_BB.poll(0) == True:


self.instance_id = instance_id
self.capture_time = capture_time
self.part_number = part_number
self.category_number = category_number
self.part_image = part_image
self.part_color = part_color
self.category_name = category_name
self.bin_assignment = bin_assignment
self.status = status